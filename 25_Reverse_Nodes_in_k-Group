读题目：
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
给出一个链表，一次翻转链表的第k个节点，并返回修改的链表
k is a positive integer and is less than or equal to the length of the linked list.
k是正数，小于等于链表的长度。
If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.
如果节点的数量不是k的倍数，则最后的剩余节点应保持原样。
You may not alter the values in the nodes, only nodes itself may be changed.
你不应该改变节点中的值，只能改变节点本身。

Only constant memory is allowed.
只有固定的内存可以使用

For example,
Given this linked list: 1->2->3->4->5
For k = 2, you should return: 2->1->4->3->5
For k = 3, you should return: 3->2->1->4->5

链表的翻转，用到递归和回溯


直接看的答案
-1 -> 1 -> 2 -> 3 -> 4 -> 5
 |    |    |    |
pre  cur  nex  tmp

-1 -> 2 -> 1 -> 3 -> 4 -> 5
 |         |    |    |
pre       cur  nex  tmp

-1 -> 3 -> 2 -> 1 -> 4 -> 5
 |              |    |    |
pre            cur  nex  tmp


class Solution {
public:
    ListNode *reverseKGroup(ListNode *head, int k) {
        if(head==NULL||k==1) return head;
        int num=0;
        //链表头结点
        ListNode *preheader = new ListNode(-1);
        preheader->next = head;
        ListNode *cur = preheader, *nex, *pre = preheader;

        //找出链表的总长度
        while(cur = cur->next)
            num++;

        while(num>=k) {
            cur = pre->next;
            nex = cur->next;
            for(int i=1;i<k;++i) {
                cur->next=nex->next;
                nex->next=pre->next;
                pre->next=nex;
                nex=cur->next;
            }
            //更新头结点
            pre = cur;
            num-=k;
        }
        return preheader->next;
    }
};
