
这个问题比较难，不过还是要一点点的来啊：贪心算法、动态规划、分治、回溯、分支和绑定

动态规划：动态规划是这样一个算法，通过将其分解成子问题来解决复杂的问题，并存储子问题的结果，避免重复计算相同的结果。

有两个主要的属性表明一个问题可以用动态规划来解决
1:重复子问题
2:最优化的结构

1）重复子问题
和分治算法一样，动态规划将解决方案和子问题结合。动态规划主要用在相同的子问题需要一遍一遍的计算问题。
动态规划计算子问题，并将子问题存储在一个表中，以便不需要重复计算。例如，二叉树搜索并不满足通常的子问题。
如果我们用递归fibonacci数列举例，就会有许多的子问题需要解决。
int fib(int n) {
  if (n <= 1) {
    return n;
  }
  return fib(n - 1) + fib(n - 2);
}

当计算f(5)时，f(3)会被计算2次。
                          fib(5)
                     /             \
               fib(4)                fib(3)
             /      \                /     \
         fib(3)      fib(2)         fib(2)    fib(1)
        /     \        /    \       /    \
  fib(2)   fib(1)  fib(1) fib(0) fib(1) fib(0)
  /    \
fib(1) fib(0)

我们在过程中可以把已经计算过的数存起来以便再次用。有两种方法
a)从顶向下的记忆方法
b)从低到高的制表方法

a)从上到下的记忆方法
这种记忆方法和递归的方法差不多，只是有一点就是他将计算的记过存储在一张表中，下次要去计算的时侯从表中去寻找。
我们预先初始化一张表，并且设置为空，我们计算的时侯首先去找这张表，如果表中有计算的结果就返回计算的结果，否则就
将计算的结果存储在表中。

用记忆法来解决fabonacci数列的代码
#define NIL -1
#define MAX 100


int lookup[MAX];

void _initialize() {
    for (int i = 0; i < MAX; i++) {
        lookup[i] = NIL;
    }
}


int fib(int n) {
    if (lookup[n] == NIL) {
        if (n <= 1) {
            lookup[n] = n;
        }else {
            lookup[n] = fib(n -1) + fib(n - 2);
        }
    }
    return lookup[n];
}


int main(int argc, const char * argv[]) {
    int n = 5;
    _initialize();
    printf("fibonacci number is %d\n", fib(n));
    return 0;
}

b)Tabulation(从低向上的方法)
对于一个给定的问题，从低向上建立表，并返回最后一次的实例。例如同样计算fabonacii数列，先算f(0)
f(1)\f(2)，通过迭代，最后返回f(n)

int fib(int n) {
    int f[n + 1];
    int i;
    f[0] = 0;
    f[1] = 1;
    for (i = 2; i < n; i++) {
        f[i] = f[i-1] + f[i -1];
    }
    return f[n];

}
