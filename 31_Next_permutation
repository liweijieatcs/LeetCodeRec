读题：
为毛连续两道题目都读不明白
翻译成中文就是下一个排列

Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
The replacement must be in-place, do not allocate extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

实现下一个排列，重新把比当前数字大的字典顺序。
如果不能实现，就排列成最小的顺序（按照上升趋势排列）。
必须在原来的位置上替换，不能申请额外的空间。

举例：输入在左边，输出在右边。


分析：
比原本给出的数组稍微大一点的字典顺序
1:稍微大一点，应该是从最后一位开始比较，如果这个数是最小的，就往前移动一位，直到找到比这个数小的数。然后交换。
2:如果都已经找到第一位了，说明这个数组是最大的组合，只能将其反向输出。

学学wiki上的算法

Well, in fact the problem of next permutation has been studied long ago.
From the Wikipedia page, in the 14th century,
a man named Narayana Pandita gives the following classic and yet quite simple algorithm
(with minor modifications in notations to fit the problem statement):

1:Find the largest index k such that nums[k] < nums[k + 1]. If no such index exists,
the permutation is sorted in descending order,
just reverse it to ascending order and we are done.
For example, the next permutation of [3, 2, 1] is [1, 2, 3].

2:Find the largest index l greater than k such that nums[k] < nums[l].
3:Swap the value of nums[k] with that of nums[l].
4:Reverse the sequence from nums[k + 1] up to end including the final element nums[nums.size() - 1].

Quite simple, yeah? Now comes the following code, which is barely a translation.

Well, a final note here, the above algorithm is indeed powerful --- it can handle the cases of duplicates!
If you have tried the problems Permutations and Permutations II, then the following function is also useful.
Both of Permutations and Permutations II can be solved easily using this function.
Hints: sort nums in ascending order, add it to the result of all permutations and then repeatedly generate the next permutation and add it ... until we get back to the original sorted condition. If you want to learn more, please visit this solution and that solution.


class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        // Find from the smallest k such that nums[k - 1] < nums[k].
        int k;
        for (k = nums.size() - 1; k > 0 && nums[k - 1] >= nums[k]; k--);

        // k == 0 means the sequence itself is non-increasing. Reverse it.
        if (k > 0) {
            // Find the index i such that nums[i] > nums[k-1], i in [k, n-1].
            int i;
            for (i = nums.size() - 1; nums[i] <= nums[k - 1]; i--);

            swap(nums[k - 1], nums[i]);
        }
        reverse(nums.begin() + k, nums.end());
    }
};

总结解法：
1:从右往左找到第一个递交的数，这时大的记为a[i],小的记为a[i-1].
2:从a[i]往右找到最后一个比a[i-1]大的数，记做a[j],交换a[i-1]和a[j].
3:将数组的第i项目到最大项进行升序排列，为最小的临近给定数组的下一个字典排列。
