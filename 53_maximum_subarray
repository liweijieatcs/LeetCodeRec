Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.

在一个数组中找到连续的子数组，使得有最大的和。

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if (nums.size() == 0) return 0;
        else if (nums.size() == 1) return nums.at(0);

        int int_local_max = nums.at(0), int_global_max = nums.at(0);
        size_t sz_length  = nums.size();
        for (size_t i = 1; i != sz_length; ++i) {
            int_local_max  = max(int_local_max + nums.at(i), nums.at(i));
            int_global_max = max(int_local_max, int_global_max);
        }

        return int_global_max;
    }
};
