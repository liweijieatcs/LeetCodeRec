Given an array S of n integers, are there elements a, b, c, and d in S
such that a + b + c + d = target? Find all unique quadruplets in the array
which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

先读懂题目：
给出一个一维数组，求这个数组的组合，使得组合中的数字加起来等于给出的tatget数字。


思路：将给出的数组进行排序，从两边往中间累加。
将数组进行排序得到s = [a1,a2,a3,a4.......an-2,an-1,an]
1:将数组进行排序后得到s，先固定选择最小的数a1和最大的数an相加与给出的目标进行比较。
2:用两个index分别选择次小数a2和次大的数an-1。
3:如果首尾的数和次小的数相加比目标数大，则向左移动次大的数。
4:如果首尾的数和次大的数相加比目标数小，则向右移动次小的数。
4:结束条件是，向左移动次大的数和次小的数的index重合。这样可以找出一组或者多组组合。
5:第一轮结束后，但是这一轮中固定了最小的数和最大的数。

下一轮势必还要固定次小的数和最大的数，重复执行上面的1-5步骤。
从次小的数a2次大的数an-1依次固定住，寻找他们中间的数。
在以上的寻找寻找过程中，有一个一直固定的数，就是最大的数。很明显没有找完。但是可以确定，包含了
最大数的组合已经被全部找完了。

接下来重复以上的步骤，固定住次大的数，重复以上步骤，直到固定的数从最大到最小，寻找结束。

分析都这么复杂，感到复杂度不能满足要求。


如果从两头分析不行，能不能从中间开始，先固定住中间的数。
1:首先得到的排序后的数组
s=[a1,a2,a3,...am-1,am,am+1,...an-2,an-1,an];
1:从中间的am开始，先求出am-1 + am + am+1 = target1,
2:如果target1小于目标target则在am+1---an之间找。如果找到了，则左移am-2,继续在右寻找，直到an.
3:如果target1大于目标target则在am-1---a1之间找。如果找到了，则右移am+2,继续向左寻找，直到a1.

暴力寻找，因为要找4个数组，用4重for循环。

从最小的头开始
1:先将数组排序
2:选择最小的三个数相加a1+a2+a3=target1,该处的target一定是最小的target,在从后面的找一位数即可。

暴力解法
1:列出所有的4个数的组合。
2:再将每个组合进行相加，如果等于target的则留下，不等于的则抛弃。


代码实现：
1:先排序
2:最小的两个循环，然后剩下的左右两边寻找。
--------------------------------------------------------------------------------
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> total;
        unsigned int n = nums.size();

        if (n < 4) {
            return total;
        }
        sort(nums.begin(), nums.end());

        for(int i = 0; i < n - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }

            if (nums[i] + nums[2] + nums[3] > target) {
                break;
            }

            if (num[i] + num[n - 3] + nums[n - 2] + nums[n - 1]) {
                continue;
            }

            for (size_t j = 0; j < n - 2; j++) {
                if (j > j+ 1 && nums[j] == nums[j - 1]) {
                    continue;
                }
                if (nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) {
                    break;
                }
                if (nums[i] + nums[j] + nums[n - 2] + nums[n - 1]) {
                    continue;
                }

                unsigned long left = j + 1;
                unsigned long right = n - 1;

                while (left < right) {
                    int nums = nums[left] + nums[right] + nums[i] + nums[j];
                    if (sum < target) {
                        left++;
                    }
                    else if (sum > target) {
                        right--;
                    }else {
                        total.push_back(vector<int>{nums[i], nums[j], nums[left], nums[right]});
                        do {
                            left++;
                        } while(nums[left] == nums[left-1] && left < right);
                        do {
                            right--;
                        } while(nums[right] ==nums[right+1] && left < right);
                    }
                }
            }
        }
    }
}
--------------------------------------------------------------------------------
