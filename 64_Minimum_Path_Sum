Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

读题：
给出一个m*n的矩阵，里面填充非负的整数，从左上角到右下角寻找和最小的路径。

从左上角到右下角要走过的路程为m-1 加上n-1 共m+n-2;因为先要从远点00走到左下角，需要走动n-1;
然后从左下角走到右下角需要m-1,共计m+n-2.

只能向下或者向右移动。

首先用枚举，暴力解法，总共可以找到的所有路径，然后从中选择最小的一条。
暴力解法的总路径条数为C(m+n-2, m-1); 可是这个数太大了。

 用动态规划
 dp[i][j]表示从左上到达(i, j)的最小值

dp[i][j] = min(dp[i - 1][j] , dp[i][j - 1]) + a[i][j];

从上过来朝右走一步
从上边过来dp[i - 1][j] + a[i][j];

从左过来朝下走一步
从左边过来dp[i][j - 1] + a[i][j];

初始值
dp[0][0] = a[0][0];
dp[0][j>0] = dp[0][j - 1] + a[0][j];
dp[i > 0][0] = dp[i - 1][0] + a[i][0];

复杂度 O(mn),空间O(mn);


不能用贪心来解决。

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n));

        for(int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++){
                if (i == 0) {
                    if (j == 0) {
                        dp[i][j] = grid[0][0];
                    }
                    else {
                      dp[i][j] = dp[i][j - 1] + grid[i][j];
                    }
                }
                else if (j == 0) {
                  dp[i][j] = dp[i - 1][j] + grid[i][j];
                }
                else {
                  dp[i][j] = min(dp[i][j - 1], dp[i - 1][j]) + grid[i][j];
                }
            }
        }
        return dp[m - 1][n - 1];
    }
};
