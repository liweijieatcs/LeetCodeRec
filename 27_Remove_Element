Given an array and a value, remove all instances of that value in place and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Example:
Given input array nums = [3,2,2,3], val = 3

Your function should return length = 2, with the first two elements of nums being 2.

给定一个数组和一个值，删除该值的所有实例，并返回新的长度。

不要为另一个数组分配额外的空间，您必须使用常量内存来执行此操作。

元素的顺序可以改变。 无论你离开新的长度什么都不重要。

例：
给定输入数组nums = [3,2,2,3]，val = 3

你的函数应该返回length = 2，num的前两个元素为2。


AC100%

class Solution {
public:
	int removeElement(vector<int>& nums, int val) {
		unsigned long originLen = nums.size();
		unsigned long cnt = 0;
		unsigned long newIndex = 0;
		unsigned long index = 0;
		if (originLen == 0)
		{
			return cnt;
		}
		for (unsigned long i = 0; i < originLen; i++)
		{
			if (nums.at(i) == val)
			{
				index++;
			}
			else
			{
				nums.at(newIndex) = nums.at(i);
				newIndex++;
			}
		}
		nums.resize(newIndex);
		return newIndex;
	}
};
