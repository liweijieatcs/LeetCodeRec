The second function is from Merge Two Sorted Lists.

The basic idea is really simple. We can merge first two lists and then push it back. 
Keep doing this until there is only one list left in vector. Actually, we can regard this as an iterative divide-and-conquer solution.

分析：
基本的思想其实很简单。我们可以合并两个列表，然后将其类推。
继续做这个，直到在vector中只有一个列表。其实我们可以把他看成一个迭代的分治解决方法。


ListNode *mergeKLists(vector<ListNode *> &lists) {
    if(lists.empty()){
        return nullptr;
    }
    while(lists.size() > 1){
        lists.push_back(mergeTwoLists(lists[0], lists[1]));
        lists.erase(lists.begin());
        lists.erase(lists.begin());
    }
    return lists.front();
}
ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
    if(l1 == nullptr){
        return l2;
    }
    if(l2 == nullptr){
        return l1;
    }
    if(l1->val <= l2->val){
        l1->next = mergeTwoLists(l1->next, l2);
        return l1;
    }
    else{
        l2->next = mergeTwoLists(l1, l2->next);
        return l2;
    }
}
