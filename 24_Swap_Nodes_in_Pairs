Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

题目分析：
给出一个单链表，交换链接的两个节点，并返回头部。
1->2->3->4
2->1->4->3

1:分别将节点的值取出来，交换后再返回头部。这样需要一个中间变量。
2：取出第一个，放在临时变量中。
3：取出第二个，放在第一节点中。
4：将临时变量放入第二个中。

再找第三个，以此类推。
调试了一下，连续两次错误，这道题目就是考察链表的指针。

Pointer-pointer pp points to the pointer to the current node. So at first, pp points to head, and later it points to the next field of ListNodes. Additionally, for convenience and clarity, pointers a and b point to the current node and the next node.

We need to go from *pp == a -> b -> (b->next) to *pp == b -> a -> (b->next). The first three lines inside the loop do that, setting those three pointers (from right to left). The fourth line moves pp to the next pair.

ListNode* swapPairs(ListNode* head) {
    ListNode **pp = &head, *a, *b;
    while ((a = *pp) && (b = a->next)) {
        a->next = b->next;
        b->next = a;
        *pp = b;
        pp = &(a->next);
    }
    return head;
}
