z 这道题完全就是数学知识的，而且是简单的找规律的题目，不涉及数据结构和算法。
这道题目的意义很大可能是涉及到密码的加密与解密方法，可是现在密码不应该有这么简单的算法了。

The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows
like this: (you may want to display this pattern in a fixed font for better legibility)

P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: "PAHNAPLSIIGYIR"
Write the code that will take a string and make this conversion given a number of rows:

string convert(string text, int nRows);
convert("PAYPALISHIRING", 3) should return "PAHNAPLSIIGYIR".
class Solution {
public:
    string convert(string s, int numRows) {

    }
};

主要找到数据变化的两个规律
第一次的思路：
因为将以前的数组排列为
0   4   8
1 3 5 7 9
2   6   10
所以常规的思路是奇数行和偶数行分开计算，这个我擅长。
主要代码如下：
for (int row = 0; row < numRows; row++) {
    if (row % 2 == 0) {
        for (int index = row; index < len; index = index + 2 * numRows - 2) {
            output += s.at(index);
        }
    }
    else {
        for (int index = row; index < len; index = index + 2 * numRows - 2 - 2 * row) {
            output += s.at(index);
        }
    }
}

第一次测试用例的时候，完美通过，我想这道题提交吧。
于是各种bug的存在，这也说明了测试用例的重要性，自己不再本地测试好就上传，简直天真。

在网上看了一下，分为首行、尾行、中间行来处理。

for (int row = 0; row < numRows; ++row)
{
    //processing row by row using (2*numRows-2) rule
    for (unsigned int index = row; index < len; index += 2 * numRows - 2)
    {
        // if it is the first row or the last row, then this is all
        output += s[index];
        // otherwise, there are middle values, using (2numRows-2-2*row) rule
        // notice that nRows-1 is the last row
        if ((row > 0) & (row < numRows - 1) & ((index + 2 * numRows - 2 - 2 * row) < len))
        {
            output += s[index + 2 * numRows - 2 - 2 * row];
        }
    }
}

完整的实现：
--------------------------------------------------------------------------------

#include <string>
#include <iostream>
#include <stdlib.h>

using namespace std;

class Solution {
public:
	string convert(string s, int numRows) {
		string output = "";
		int len = s.length();

		if (numRows == 1)
		{
			return s;
		}

		for (int row = 0; row < numRows; ++row)
		{
			//processing row by row using (2*numRows-2) rule
			for (unsigned int index = row; index < len; index += 2 * numRows - 2)
			{
				// if it is the first row or the last row, then this is all
				output += s[index];
				// otherwise, there are middle values, using (2numRows-2-2*row) rule
				// notice that nRows-1 is the last row
				if ((row > 0) & (row < numRows - 1) & ((index + 2 * numRows - 2 - 2 * row) < len))
				{
					output += s[index + 2 * numRows - 2 - 2 * row];
				}
			}
		}

		return output;
	}
};
--------------------------------------------------------------------------------
